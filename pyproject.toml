[project]
authors = [{ name = "James O'Claire" }]
name = "hackernews-scraper"
description = "Crawl latest hackernews and store for more convenient api calling"
version = "0.1.2"
dependencies = [
    "litestar[standard]",
    "pydantic",
    "pandas",
    "requests",
    "tldextract",
    "gunicorn",
    "uvicorn",
]

[project.optional-dependencies]
dev = ["pre-commit", "bump2version", "umami-analytics"]

[build-system]
requires = ["setuptools", "wheel"]


[tool.isort]
profile = 'black'

[tool.ruff]
target-version = 'py312'
#select = ["ALL"]
lint.select = [
    "A",   # flake8 builtins 
    "E",   # errors 
    "W",   # pycodestyle Warnings 
    "F",   # PyFlake 
    "B",   # flake8-bugbear rules 
    "I",   # import sort 
    "N",   # PEP8 naming rules 
    "UP",  # pyupgrade, warnings for common mistakes for new versions
    "PLW", # pyflake
    "PLC", # pyflake
    "PLE", # pyflake
    "PD",  # pandas-vet
    #"D", # pydocstyle, all funcs have docstring 
]


# Never enforce `E501` (line length violations).
lint.ignore = [
    "E501",   # line length
    "W291",   # trailing space at end of line
    "G",      # Ignore pyflake logging as it does not like f-strings in log messages.
    "RET504", # Unnecessary assignment to variable before return, but I prefer for readability.
    "PD901",  # Avoid using the generic variable name 'df' but I prefer for readability
]

lint.fixable = ["ALL"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
lint.unfixable = ["B"]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
